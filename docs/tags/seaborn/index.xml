<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>seaborn on dullmode</title>
    <link>https://dullmode.github.io/tags/seaborn/</link>
    <description>Recent content in seaborn on dullmode</description>
    <image>
      <title>dullmode</title>
      <url>https://imgur.com/a/SR2UQt7</url>
      <link>https://imgur.com/a/SR2UQt7</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 22 Jul 2022 06:12:48 +0900</lastBuildDate><atom:link href="https://dullmode.github.io/tags/seaborn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPUの性能と職業別労働者数の関係を調べた</title>
      <link>https://dullmode.github.io/posts/2022-07-22/</link>
      <pubDate>Fri, 22 Jul 2022 06:12:48 +0900</pubDate>
      
      <guid>https://dullmode.github.io/posts/2022-07-22/</guid>
      <description>下準備 processor.csvはその年の最高性能のものを抽出
import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import statsmodels.api as sm #CPU性能と職業別労働者数をデータフレームする p_df = pd.read_csv(&amp;#39;data/input/processor.csv&amp;#39;) p_df = p_df.groupby(&amp;#39;year&amp;#39;, group_keys=False).apply(lambda x: x.loc[x[&amp;#39;MOS transistor count&amp;#39;].idxmax()]) w_df = pd.read_csv(&amp;#39;data/input/worker2.csv&amp;#39;) #マージする p_df.reset_index(drop = True, inplace = True) w_df.reset_index(drop = True, inplace = True) df = pd.merge(w_df, p_df, on=&amp;#34;year&amp;#34;, how=&amp;#34;left&amp;#34;) #目的変数のリスト objective_vars = [&amp;#39;agriculture&amp;#39;, &amp;#39;fisheries&amp;#39;, &amp;#39;mining&amp;#39;, &amp;#39;construction&amp;#39;, &amp;#39;manifacture&amp;#39;, &amp;#39;infrastructure&amp;#39;, &amp;#39;infomation&amp;#39;, &amp;#39;transport&amp;#39;, &amp;#39;retail&amp;#39;, &amp;#39;finance&amp;#39;, &amp;#39;real-estate&amp;#39;, &amp;#39;research&amp;#39;, &amp;#39;accommodations-service&amp;#39;,&amp;#39;personal-service&amp;#39;, &amp;#39;education&amp;#39;, &amp;#39;medical&amp;#39;,&amp;#39;compound&amp;#39;,&amp;#39;etc&amp;#39;,&amp;#39;gov&amp;#39;] 複合グラフの作成 折れ線グラフが目的変数、棒グラフが説明変数</description>
    </item>
    
  </channel>
</rss>
